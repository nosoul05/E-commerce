{"version":3,"sources":["components/menu-item/menu-item.component.jsx","components/directory/directory.component.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["MenuItem","title","imageUrl","size","className","style","backgroundImage","toUpperCase","Directory","state","sections","id","linkUrl","this","map","React","Component","HomePage","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAiBeA,EAdE,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,KAAnB,OACb,sBAAKC,UAAS,UAAKD,EAAL,cAAd,UACI,qBAAKC,UAAU,mBACXC,MAAO,CAACC,gBAAgB,OAAD,OAASJ,EAAT,QAG/B,sBAAKE,UAAU,UAAf,UACI,oBAAIA,UAAU,QAAd,SAAuBH,EAAMM,gBAC7B,sBAAMH,UAAU,WAAhB,6BC8COI,G,wDAnDX,aAAc,IAAD,8BACT,gBAEKC,MAAQ,CACTC,SAAU,CAAC,CACPT,MAAO,OACPC,SAAU,oCACVS,GAAI,EACJC,QAAS,aAEX,CACEX,MAAO,UACPC,SAAU,uCACVS,GAAI,EACJC,QAAS,gBAEX,CACEX,MAAO,WACPC,SAAU,wCACVS,GAAI,EACJC,QAAS,iBAEX,CACEX,MAAO,SACPC,SAAU,sCACVC,KAAM,QACNQ,GAAI,EACJC,QAAS,eAEX,CACEX,MAAO,OACPC,SAAU,mCACVC,KAAM,QACNQ,GAAI,EACJC,QAAS,eAlCR,E,0CAuCb,WACI,OACI,qBAAKR,UAAU,iBAAf,SAEOS,KAAKJ,MAAMC,SAASI,KAAI,gBAAEb,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAUS,EAAnB,EAAmBA,GAAIR,EAAvB,EAAuBA,KAAvB,OAAiC,cAAC,EAAD,CAAmBF,MAAOA,EAAOC,SAAUA,EAAUC,KAAMA,GAA5CQ,Y,GA5CnEI,IAAMC,YCQfC,EAPE,kBAEb,qBAAKb,UAAU,WAAf,SACG,cAAC,EAAD,OCKQc,MARf,WACE,OACE,8BACF,cAAC,EAAD,OCGkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.b6e6a67c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './menu-item.styles.scss';\r\n\r\nconst MenuItem = ({title, imageUrl, size}) => (\r\n    <div className={`${size} menu-item`}>\r\n        <div className='background-image'\r\n            style={{backgroundImage: `url(${imageUrl})`\r\n            }} \r\n        />\r\n    <div className='content'>\r\n        <h1 className='title'>{title.toUpperCase()}</h1>\r\n        <span className='subtitle'>SHOP NOW</span>\r\n\r\n    </div>\r\n</div>\r\n);\r\n\r\nexport default MenuItem;","import React from \"react\";\r\nimport MenuItem from \"../menu-item/menu-item.component\";\r\n\r\nimport './directory.styles.scss';\r\n\r\nclass Directory extends React.Component{\r\n    constructor(){\r\n        super();\r\n        \r\n        this.state = {\r\n            sections: [{\r\n                title: 'hats',\r\n                imageUrl: 'https://i.ibb.co/cvpntL1/hats.png',\r\n                id: 1,\r\n                linkUrl: 'shop/hats'\r\n              },\r\n              {\r\n                title: 'jackets',\r\n                imageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',\r\n                id: 2,\r\n                linkUrl: 'shop/jackets'\r\n              },\r\n              {\r\n                title: 'sneakers',\r\n                imageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',\r\n                id: 3,\r\n                linkUrl: 'shop/sneakers'\r\n              },\r\n              {\r\n                title: 'womens',\r\n                imageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',\r\n                size: 'large',\r\n                id: 4,\r\n                linkUrl: 'shop/womens'\r\n              },\r\n              {\r\n                title: 'mens',\r\n                imageUrl: 'https://i.ibb.co/R70vBrQ/men.png',\r\n                size: 'large',\r\n                id: 5,\r\n                linkUrl: 'shop/mens'\r\n              }]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className='directory-menu'>\r\n                {\r\n                   this.state.sections.map(({title, imageUrl, id, size}) => <MenuItem key={id} title={title} imageUrl={imageUrl} size={size} /> )\r\n                }\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Directory;","import React from \"react\";\r\nimport './homepage.styles.scss';\r\n\r\nimport Directory from \"../../components/directory/directory.component\";\r\n\r\n\r\nconst HomePage = () => (\r\n\r\n    <div className='homepage'>\r\n       <Directory />\r\n    </div>\r\n);\r\n\r\nexport default HomePage;","import React from 'react';\nimport './App.css';\n\nimport HomePage from './pages/homepage/homepage.component';\n// import HomePage from '../../src/homepage.component';\n\nfunction App() {\n  return (\n    <div>\n  <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}